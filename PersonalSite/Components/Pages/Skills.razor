@page "/Skills"

<PageTitle>Skills</PageTitle>

@foreach(var heading in badges.Select(b => b.Heading).Distinct())
{
    <RadzenCard class="rz-mb-4">
        <RadzenCardHeader>
            @heading
        </RadzenCardHeader>
        <RadzenCardText>
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Left" Gap="1rem">
                @foreach(var badge in badges.Where(b => b.Heading == heading).OrderByDescending(x => x.Years))
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Light" class="rz-border-radius-6 rz-shadow-6 rz-border-black">
                        @badge.Text
                        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Shade="Shade.Lighter" IsPill="@true" Text="@badge.Years.ToString()" class="rz-ml-2" />
                    </RadzenButton>
                }
            </RadzenStack>
        </RadzenCardText>
    </RadzenCard>
}
<RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Left" Class="rz-p-12" Gap="2rem">
</RadzenStack>

@code
{
    private record Badge (string Heading, string Text, int Years)
    {
        public string Heading { get; set; } = Heading;
        public string Text { get; set; } = Text;
        public int Years { get; set; } = Years;
    }

    private List<Badge> badges = new()
    {
        new Badge("Languages", "C", 2),
        new Badge("Languages", "C++", 2),
        new Badge("Languages", "C#", GetYearsSinceIntroduction(2002)),
        new Badge("Languages", "Javascript", GetYearsSinceIntroduction(2015)),
        new Badge("Languages", "Markdown", GetYearsSinceIntroduction(2012)),
        new Badge("Languages", "Powershell", GetYearsSinceIntroduction(2010)),
        new Badge("Languages", "Typescript", GetYearsSinceIntroduction(2017)),
        new Badge("Databases", "Firebase", 2),
        new Badge("Databases", "MSSQL", GetYearsSinceIntroduction(1998)),
        new Badge("Databases", "MongoDB", 2),
        new Badge("Databases", "MySQL", 4),
        new Badge("Databases", "PostgreSQL", 2),
        new Badge("Databases", "SQLite", 2),
        new Badge("Frameworks", ".NET", GetYearsSinceIntroduction(2002)),
        new Badge("Frameworks", "Blazor", 2),
        new Badge("Frameworks", "Bootstrap", 2),
        new Badge("Frameworks", "NPM", 2),
        new Badge("Frameworks", "Node.JS", 2),
        new Badge("Frameworks", "CSS", 2),
        new Badge("Frameworks", "SASS", 2),
        new Badge("Frameworks", "Vite", 2),
        new Badge("Frameworks", "VueJS", 2),
        new Badge("Frameworks", "Vuetify", 2),
        new Badge("Frameworks", "Yarn", 2),
        new Badge("Tools", "Docker", GetYearsSinceIntroduction(2018)),
        new Badge("Tools", "Git", GetYearsSinceIntroduction(2015)),
        new Badge("Tools", "Github", 2),
        new Badge("Tools", "Jira", 2),
        new Badge("Tools", "Postman", 2),
        new Badge("Tools", "RabbitMQ", 2),
        new Badge("Tools", "Redis", 2),
        new Badge("Tools", "MassTransit", 2),
        new Badge("Tools", "VSCode", 2),
        new Badge("Tools", "Visual Studio", GetYearsSinceIntroduction(1999)),
        new Badge("Operating Systems", "Raspberry PI", 2),
        new Badge("Operating Systems", "Linux", 2),
        new Badge("Operating Systems", "Ubuntu", 2),
        new Badge("Operating Systems", "Windows", GetYearsSinceIntroduction(1997)),
        new Badge("Operating Systems", "Windows Server", 2),
        new Badge("Security", "JWT", 2),
        new Badge("Security", "OAuth", 2),
    };

    private static int GetYearsSinceIntroduction(int introYear)
    {
        return (DateTime.Now.Year - introYear);
    }
}
